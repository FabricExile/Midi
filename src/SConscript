#
# Copyright 2010-2014 Fabric Software Inc. All rights reserved.
#
import platform, json, os, shutil
Import('parentEnv', 'kl2edk', 'kl', 'extSuffix', 'STAGE_DIR')

extName = 'Midi'

env = parentEnv.Clone()
env.Append(CPPPATH = [env.Dir('.').abspath])
env.Append(CPPPATH = [env.Dir('#').Dir('thirdparty').Dir('rtmidi-2.1.0').abspath])
env.Append(CCFLAGS = ['/EHsc'])

# as described here: http://www.music.mcgill.ca/~gary/rtmidi/index.html#compiling
osname = platform.system().lower()
if osname.startswith('win'):
  env.Append(CPPDEFINES = ['__WINDOWS_MM__'])
  env.Append(LIBS = ['winmm'])
elif osname.startswith('lin'):
  env.Append(CPPDEFINES = ['__MACOSX_CORE__'])
  env.Append(LIBS = ['CoreMIDI', 'CoreAudio', 'CoreFoundation'])
else:
  env.Append(CPPDEFINES = ['__LINUX_ALSA__'])
  env.Append(LIBS = ['asound', 'pthread'])

sources = [
  env.File('Midi.fpm.json')
]
sources += env.Glob('*.kl')

cppFiles = [
  env.File('extension.cpp'),
  env.File('MidiInput_functions.cpp'),
  env.File('MidiOutput_functions.cpp'),
  env.Dir('#').Dir('thirdparty').Dir('rtmidi-2.1.0').File('RtMidi.cpp')
]

headers = [
  env.File('Midi.h')
]

extData = json.loads(open(sources[0].srcnode().abspath, 'r').read())
extVersion = extData['version']

extStageDir = STAGE_DIR.Dir('Exts').Dir(extName)
presetStageDir = STAGE_DIR.Dir('Presets').Dir('DFG').Dir('ThirdParty').Dir(extName)
extensionFiles = env.Install(extStageDir, [env.File(extName+'.fpm.json')] + env.Glob('*.kl'))
kl2dfgLogFile = presetStageDir.File('kl2dfg.log')
kl2edkResults = env.RunKL2EDK(headers, sources)
kl2dfgResults = env.RunKL2DFG([kl2dfgLogFile], extensionFiles)

compounds = env.Glob(os.path.join(env.Dir('#').Dir('Presets').abspath, '*.canvas'))
installedCompounds = env.Install(presetStageDir.Dir('Compounds'), compounds)

extLibFileName = env.File(extName + '-' + extSuffix)
libraryFiles = Flatten([env.SharedLibrary(extLibFileName, cppFiles)])
env.Depends(cppFiles, kl2edkResults)
env.Depends(kl2dfgResults, libraryFiles)

extensionFiles += env.Install(extStageDir, libraryFiles[0])
extensionFiles += kl2edkResults
extensionFiles += kl2dfgResults
extensionFiles += installedCompounds
extensionFiles = Flatten(extensionFiles)

env.AlwaysBuild(extensionFiles)
alias = env.Alias(extName, extensionFiles)

Return('alias')
