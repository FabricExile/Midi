// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "sets the ButtonCallback on this controller\n\nSupported types:\n  this: MidiController\n  callback: MidiButtonCallback\n"
    },
  "title" : "SetButtonCallback[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "IO",
      "name" : "this",
      "execPortType" : "IO",
      "typeSpec" : "MidiController[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "defaultValues" : {
        "MidiButtonCallback[]" : [
          null
          ]
        },
      "name" : "callback",
      "execPortType" : "In",
      "typeSpec" : "MidiButtonCallback[]"
      }
    ],
  "extDeps" : {
    "Midi" : "*"
    },
  "presetGUID" : "8FD61234712152B92DAC348CF3B7BA40",
  "code" : "require Midi;

operator Midi_MidiController_setButtonCallback_task<<<index>>>(
  io MidiController[] this
, in MidiButtonCallback[] callback
) {
  this[index < this.size() ? index : this.size() - 1].setButtonCallback(callback[index < callback.size() ? index : callback.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( callback.size() == 0) return;
  Size task_size = this.size();
  if(task_size < callback.size()) task_size = callback.size();
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      Midi_MidiController_setButtonCallback_task(index, this, callback);
    }
  } else {
    Midi_MidiController_setButtonCallback_task<<<task_size>>>(this, callback);
  }
}
"
  }