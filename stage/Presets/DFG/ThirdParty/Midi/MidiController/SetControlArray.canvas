// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "sets the value of a given control\n\n Supported by MidiController"
    },
  "title" : "SetControl[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "IO",
      "name" : "this",
      "execPortType" : "IO",
      "typeSpec" : "MidiController[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Byte[]" : [
          0
          ]
        },
      "name" : "index",
      "execPortType" : "In",
      "typeSpec" : "Byte[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Byte[]" : [
          0
          ]
        },
      "name" : "channel",
      "execPortType" : "In",
      "typeSpec" : "Byte[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Byte[]" : [
          0
          ]
        },
      "name" : "value",
      "execPortType" : "In",
      "typeSpec" : "Byte[]"
      }
    ],
  "extDeps" : {
    "Midi" : "*"
    },
  "presetGUID" : "D8BE523A2CE35B2542CE08FD185F1CB7",
  "code" : "require Midi;

operator Midi_MidiController_setControl_task<<<index>>>(
  io MidiController[] this
, in Byte[] index
, in Byte[] channel
, in Byte[] value
) {
  this[index < this.size() ? index : this.size() - 1].setControl(index[index < index.size() ? index : index.size() - 1], channel[index < channel.size() ? index : channel.size() - 1], value[index < value.size() ? index : value.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( index.size() == 0) return;
  if( channel.size() == 0) return;
  if( value.size() == 0) return;
  Size task_size = this.size();
  if(task_size < index.size()) task_size = index.size();
  if(task_size < channel.size()) task_size = channel.size();
  if(task_size < value.size()) task_size = value.size();
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      Midi_MidiController_setControl_task(index, this, index, channel, value);
    }
  } else {
    Midi_MidiController_setControl_task<<<task_size>>>(this, index, channel, value);
  }
}
"
  }