// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "\n\n Supported by MidiInput"
    },
  "title" : "IgnoreTypes[]",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "IO",
      "name" : "this",
      "execPortType" : "IO",
      "typeSpec" : "MidiInput[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Boolean[]" : [
          false
          ]
        },
      "name" : "midiSysex",
      "execPortType" : "In",
      "typeSpec" : "Boolean[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Boolean[]" : [
          false
          ]
        },
      "name" : "midiTime",
      "execPortType" : "In",
      "typeSpec" : "Boolean[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Boolean[]" : [
          false
          ]
        },
      "name" : "midiSense",
      "execPortType" : "In",
      "typeSpec" : "Boolean[]"
      }
    ],
  "extDeps" : {
    "Midi" : "*"
    },
  "presetGUID" : "6AC95351BF9ABADAF960E0142D5EC725",
  "code" : "require Midi;

operator Midi_MidiInput_ignoreTypes_task<<<index>>>(
  io MidiInput[] this
, in Boolean[] midiSysex
, in Boolean[] midiTime
, in Boolean[] midiSense
) {
  this[index < this.size() ? index : this.size() - 1].ignoreTypes(midiSysex[index < midiSysex.size() ? index : midiSysex.size() - 1], midiTime[index < midiTime.size() ? index : midiTime.size() - 1], midiSense[index < midiSense.size() ? index : midiSense.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( midiSysex.size() == 0) return;
  if( midiTime.size() == 0) return;
  if( midiSense.size() == 0) return;
  Size task_size = this.size();
  if(task_size < midiSysex.size()) task_size = midiSysex.size();
  if(task_size < midiTime.size()) task_size = midiTime.size();
  if(task_size < midiSense.size()) task_size = midiSense.size();
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      Midi_MidiInput_ignoreTypes_task(index, this, midiSysex, midiTime, midiSense);
    }
  } else {
    Midi_MidiInput_ignoreTypes_task<<<task_size>>>(this, midiSysex, midiTime, midiSense);
  }
}
"
  }